diff --git a/vendor/github.com/Arman92/go-tdlib/methods.go b/vendor/github.com/Arman92/go-tdlib/methods.go
index 59ffe37..71dd70b 100644
--- a/vendor/github.com/Arman92/go-tdlib/methods.go
+++ b/vendor/github.com/Arman92/go-tdlib/methods.go
@@ -4495,11 +4495,15 @@ func (client *Client) TransferChatOwnership(chatID int64, userID int32, password
 // GetChatMember Returns information about a single member of a chat
 // @param chatID Chat identifier
 // @param userID User identifier
-func (client *Client) GetChatMember(chatID int64, userID int32) (*ChatMember, error) {
+func (client *Client) GetChatMember(chatID, userID int64) (*ChatMember, error) {
 	result, err := client.SendAndCatch(UpdateData{
 		"@type":   "getChatMember",
 		"chat_id": chatID,
 		"user_id": userID,
+		"member_id": UpdateData{
+			"@type":   MessageSenderUserType,
+			"user_id": userID,
+		},
 	})
 
 	if err != nil {
diff --git a/vendor/github.com/Arman92/go-tdlib/types.go b/vendor/github.com/Arman92/go-tdlib/types.go
index a5264e6..58fde13 100644
--- a/vendor/github.com/Arman92/go-tdlib/types.go
+++ b/vendor/github.com/Arman92/go-tdlib/types.go
@@ -4328,7 +4328,7 @@ func (inputChatPhotoAnimation *InputChatPhotoAnimation) GetInputChatPhotoEnum()
 // User Represents a user
 type User struct {
 	tdCommon
-	ID                int32         `json:"id"`                 // User identifier
+	ID                int64         `json:"id"`                 // User identifier
 	FirstName         string        `json:"first_name"`         // First name of the user
 	LastName          string        `json:"last_name"`          // Last name of the user
 	Username          string        `json:"username"`           // Username of the user
@@ -4371,7 +4371,7 @@ func (user *User) MessageType() string {
 // @param haveAccess If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser
 // @param typeParam Type of the user
 // @param languageCode IETF language tag of the user's language; only available to bots
-func NewUser(iD int32, firstName string, lastName string, username string, phoneNumber string, status UserStatus, profilePhoto *ProfilePhoto, isContact bool, isMutualContact bool, isVerified bool, isSupport bool, restrictionReason string, isScam bool, isFake bool, haveAccess bool, typeParam UserType, languageCode string) *User {
+func NewUser(iD int64, firstName string, lastName string, username string, phoneNumber string, status UserStatus, profilePhoto *ProfilePhoto, isContact bool, isMutualContact bool, isVerified bool, isSupport bool, restrictionReason string, isScam bool, isFake bool, haveAccess bool, typeParam UserType, languageCode string) *User {
 	userTemp := User{
 		tdCommon:          tdCommon{Type: "user"},
 		ID:                iD,
@@ -4405,7 +4405,7 @@ func (user *User) UnmarshalJSON(b []byte) error {
 	}
 	tempObj := struct {
 		tdCommon
-		ID                int32         `json:"id"`                 // User identifier
+		ID                int64         `json:"id"`                 // User identifier
 		FirstName         string        `json:"first_name"`         // First name of the user
 		LastName          string        `json:"last_name"`          // Last name of the user
 		Username          string        `json:"username"`           // Username of the user
